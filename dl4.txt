import tensorflow as tf
import numpy as np
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Normalize the images to [0, 1] by dividing by 255
X_train = X_train / 255.0
X_test = X_test / 255.0

# One-hot encode the labels (digits 0-9)
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

 model = models.Sequential([
 layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
 layers.MaxPooling2D((2, 2)),
 layers.Conv2D(64, (3, 3), activation='relu'),
 layers.MaxPooling2D((2, 2)),
 layers.Conv2D(64, (3, 3), activation='relu'),
 layers.Flatten(),
 layers.Dense(64, activation='relu'),
 layers.Dense(10, activation='softmax') # Output layer with 10 classes (0-9
 ])

model.compile(optimizer='adam',
 loss="categorical_crossentropy",
 metrics=['accuracy']
             )

 model.fit(X_train, y_train, epochs=5, batch_size=64)             

test_loss,test_acc=model.evaluate(X_test,y_test)
print(f'\nTest accuracy: {test_acc:.4f}')

 predictions = model.predict(X_test[:5])
 predicted_labels = np.argmax(predictions, axis=1)
 print("Predicted labels for first 5 samples:", predicted_labels)
 print("True labels for first 5 samples:", np.argmax(y_test[:5], axis=1))